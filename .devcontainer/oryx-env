#!/bin/bash
# 
# Command: oryx-env [update global defaults flag] [taget platforms ]
#
# - "Update global defaults flag" is either "true" or "false" and updates symlinks that are in 
#    the path so that any new process gets the changes rather than just the current shell.
#
# - "Target platforms" can be set to:
#   - "detect" which will automatically detect platforms based on the current folder
#   - "default" which will reset back to whatever the defaults were previously
#   - "reset" which will reset the environment back to what was in the image to start with
#   - Or a separated list of platform names and versions in the form "nodejs=8.17.0 java=1.8.0". 
#     Available platform versions can be found by running "oryx platforms" command.
#
set -e

UPDATE_GLOBAL_DEFAULTS=${1:-"true"}
PLATFORM_MODE=${2:-"detect"}

# Make sure file exists
touch /opt/oryx/default-platform-versions

if [ "${PLATFORM_MODE}" = "detect" ]; then
    echo "Detecting platform versions..."
    TARGET_PLATFORMS="$(oryx prep -s . | tee /dev/tty | grep -oE '^\s+.+:\s.+' | sed -e 's/^[ \t]*//' | sed -e 's/: /=/')"
elif [ "${PLATFORM_MODE}" = "default" ]; then
    TARGET_PLATFORMS="$(cat /opt/oryx/default-platform-versions)"
elif [ "${PLATFORM_MODE}" = "reset" ]; then
    TARGET_PLATFORMS="$(cat /opt/oryx/original-platform-versions)"
else
    # If all else fails, treat remaining arguments as platform=version strings
    shift
    TARGET_PLATFORMS="$(echo $@ | tr ' ' '\n')"
    oryx prep --skip-detection --platforms-and-versions "${TARGET_PLATFORMS//$'\n'/,}"
fi

# Merge with existing defaults and update symlinks if needed
UPDATED_PLATFORMS="$(cat /opt/oryx/default-platform-versions)"
while read -r PLATFORM_AND_VERSION
do
    PLATFORM="${PLATFORM_AND_VERSION%=*}"
    PLATFORM_VERSION="${PLATFORM_AND_VERSION##*=}"
    if [ "${PLATFORM// /}" != "" ]; then
        # Replace if exists in file, otherwise add it
        if [[ "${UPDATED_PLATFORMS}" == *"${PLATFORM}="* ]]; then
            UPDATED_PLATFORMS="$(sed -e "s/${PLATFORM}=.*/${PLATFORM_AND_VERSION}/" <<< "${UPDATED_PLATFORMS}")"
        else
            UPDATED_PLATFORMS="${UPDATED_PLATFORMS}"$'\n'"${PLATFORM_AND_VERSION}"
        fi
        if [ "${UPDATE_GLOBAL_DEFAULTS}" = "true" ] ||  [ "${UPDATE_GLOBAL_DEFAULTS}" = "symlinks-only" ]; then
            rm -f /opt/$PLATFORM/current
            ln -s /opt/$PLATFORM/$PLATFORM_VERSION /opt/$PLATFORM/current
        fi
    fi
done <<< "${TARGET_PLATFORMS}"

# Update SDKs symlinks if dotnet is a platform that was updated
find /opt/dotnet/*.*.*/sdk -maxdepth 1 -type d -name "*.*.*" | while read SDK_PATH; do
    ALL_SDK_PATH="/home/codespace/.dotnet/sdk/$(basename ${SDK_PATH})"
    rm -f "${ALL_SDK_PATH}"
    ln -s "${SDK_PATH}" "${ALL_SDK_PATH}"
done

# Save manifest of global defaults if enabled
if [ "${UPDATE_GLOBAL_DEFAULTS}" = "true" ]; then
    echo "${UPDATED_PLATFORMS}" >| /opt/oryx/default-platform-versions
fi

# Source an updated environment path that matches - script needs to be sourced to pick these changes up
. benv ${UPDATED_PLATFORMS//$'\n'/ } 2>/dev/null